package wyq.appengine.component;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import wyq.appengine.Component;

/**
 * This is a component pool using HashMap.
 * 
 * @version 1
 * @author wangyq
 * 
 */
public class ComponentPool implements Component {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7666388419552059615L;
	private Map<RepositoryKeyEntry, Component> compPool = new HashMap<RepositoryKeyEntry, Component>();

	/**
	 * Find a component by name and class. You will get null if there is none
	 * registered. The name and class arguments can NOT both be null.
	 * 
	 * @see java.util.HashMap#get(Object)
	 * @param name
	 * @param cls
	 * @return
	 */
	public Component retrieve(String name, Class<? extends Component> cls) {
		if (name == null && cls == null) {
			throw new RuntimeException("Wrong arguments! NullPointException!");
		}
		return get(name, cls);
	}

	/**
	 * Register the c component to the pool. The name or class can either be
	 * null but not both.
	 * 
	 * @see java.util.HashMap#put(Object, Object)
	 * @param c
	 * @param name
	 * @param cls
	 * @return
	 */
	public Component register(Component c, String name,
			Class<? extends Component> cls) {
		if (c == null) {
			throw new RuntimeException(
					"Register null component is not allowed!");
		}
		if (name == null && cls == null) {
			throw new RuntimeException("Wrong arguments! NullPointException!");
		}
		return put(name, cls, c);
	}

	/**
	 * Remove the component.
	 * 
	 * @see java.util.HashMap#remove(Object)
	 * @param name
	 * @param cls
	 * @return
	 */
	public Component unregister(String name, Class<? extends Component> cls) {
		if (name == null && cls == null) {
			throw new RuntimeException("Wrong arguments! NullPointException!");
		}
		return compPool.remove(new RepositoryKeyEntry(name, cls));
	}

	/**
	 * See {@link java.util.HashMap#containsKey(Object)}
	 * 
	 * @see java.util.HashMap#containsKey(Object)
	 * @param name
	 * @param cls
	 * @return
	 */
	public boolean contains(String name, Class<? extends Component> cls) {
		if (name == null && cls == null) {
			throw new RuntimeException("Wrong arguments! NullPointException!");
		}
		return compPool.containsKey(new RepositoryKeyEntry(name, cls));
	}

	/**
	 * See {@link java.util.HashMap#containsValue(Object)}
	 * 
	 * @see java.util.HashMap#containsValue(Object)
	 * @param c
	 * @return
	 */
	public boolean contains(Component c) {
		return compPool.containsValue(c);
	}

	protected Component put(String name, Class<? extends Component> cls,
			Component c) {
		return compPool.put(new RepositoryKeyEntry(name, cls), c);
	}

	protected Component get(String name, Class<? extends Component> cls) {
		return compPool.get(new RepositoryKeyEntry(name, cls));
	}

	/**
	 * This class is used to be a key in the {@link java.util.HashMap}. the
	 * {@code hashCode()} and {@code equals} are generated by eclipse.
	 * 
	 * @author wangyq
	 * 
	 */
	private class RepositoryKeyEntry implements Serializable {

		/**
		 * 
		 */
		private static final long serialVersionUID = 7651130285670214606L;

		public RepositoryKeyEntry(String name, Class<?> entryClass) {
			this.name = name;
			this.entryClass = entryClass;
		}

		private String name;
		private Class<?> entryClass;

		/*
		 * (non-Javadoc)
		 * 
		 * @see java.lang.Object#hashCode()
		 */
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result
					+ ((entryClass == null) ? 0 : entryClass.hashCode());
			result = prime * result + ((name == null) ? 0 : name.hashCode());
			return result;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see java.lang.Object#equals(java.lang.Object)
		 */
		@Override
		public boolean equals(Object obj) {
			if (this == obj) {
				return true;
			}
			if (obj == null) {
				return false;
			}
			if (!(obj instanceof RepositoryKeyEntry)) {
				return false;
			}
			RepositoryKeyEntry other = (RepositoryKeyEntry) obj;
			if (!getOuterType().equals(other.getOuterType())) {
				return false;
			}
			if (entryClass == null) {
				if (other.entryClass != null) {
					return false;
				}
			} else if (!entryClass.equals(other.entryClass)) {
				return false;
			}
			if (name == null) {
				if (other.name != null) {
					return false;
				}
			} else if (!name.equals(other.name)) {
				return false;
			}
			return true;
		}

		private ComponentPool getOuterType() {
			return ComponentPool.this;
		}
	}
}
